@baseUrl = http://localhost:6688

### signup user
POST {{baseUrl}}/api/signup
Content-Type: application/json

{
    "workspace": "acme",
    "fullname": "startdusk",
    "email": "startdusk@acme.org",
    "password": "password"
}

### signup user ben
POST {{baseUrl}}/api/signup
Content-Type: application/json

{
    "workspace": "acme",
    "fullname": "ben",
    "email": "ben@acme.org",
    "password": "password"
}

### signup user john
POST {{baseUrl}}/api/signup
Content-Type: application/json

{
    "workspace": "acme",
    "fullname": "john",
    "email": "john@acme.org",
    "password": "password"
}

### signup user panda
POST {{baseUrl}}/api/signup
Content-Type: application/json

{
    "workspace": "acme",
    "fullname": "panda",
    "email": "panda@acme.org",
    "password": "password"
}

### signin user(valid)
# @name signin
POST {{baseUrl}}/api/signin
Content-Type: application/json

{
    "email": "startdusk@acme.org",
    "password": "password"
}

### auth token with startdusk
@authToken = {{signin.response.body.$.token}}

### signin user(valid)
# @name signin1
POST {{baseUrl}}/api/signin
Content-Type: application/json

{
    "email": "ben@acme.org",
    "password": "password"
}

### auth token with ben
@authToken1 = {{signin1.response.body.$.token}}

### signin user(invalid)
POST {{baseUrl}}/api/signin
Content-Type: application/json

{
    "email": "unknown@acme.org",
    "password": "password"
}

### create chat with startdusk
POST {{baseUrl}}/api/chats
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "name": "project X",
    "members": [1, 2],
    "public": false
}

### create direct chat with startdusk
POST {{baseUrl}}/api/chats
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "members": [1, 2],
    "public": false
}

### create chats without startdusk
POST {{baseUrl}}/api/chats
Content-Type: application/json
Authorization: Bearer {{authToken1}}

{
    "name": "project Y",
    "members": [2, 3],
    "public": false
}

### create direct chat without startdusk
POST {{baseUrl}}/api/chats
Content-Type: application/json
Authorization: Bearer {{authToken1}}

{
    "members": [2, 3],
    "public": false
}


### get chat list
GET {{baseUrl}}/api/chats
Authorization: Bearer {{authToken}}


### get user list
GET {{baseUrl}}/api/users
Authorization: Bearer {{authToken}}

### upload files
POST {{baseUrl}}/api/upload
Authorization: Bearer {{authToken}}
Content-Type: multipart/form-data; boundary=MyBoundary

--MyBoundary
Content-Disposition: form-data; name="file"; filename="leetcode.png"
Content-Type: application/octet-stream

< leetcode.png
--MyBoundary
Content-Disposition: form-data; filename="hello.txt"
Content-Type: text/plain

Hello, World!
--MyBoundary--

### get files txt
GET {{baseUrl}}/api/files/1/0a0/a9f/2a6772942557ab5355d76af442f8f65e01.txt
Authorization: Bearer {{authToken}}

### get files png
GET {{baseUrl}}/api/files/1/1f5/80b/372d457f616afdc8d24f969966deb6dc17.png
Authorization: Bearer {{authToken}}

### send a message
POST {{baseUrl}}/api/chats/1
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "content": "Hello, World!",
    "files": []
}

### get messages
GET {{baseUrl}}/api/chats/1/messages?limit=6&last_id=10
Authorization: Bearer {{authToken}}

### use cloudflare AI
@cfAccount = xxx
@cfToken = xxx

POST https://api.cloudflare.com/client/v4/accounts/{{cfAccount}}/ai/run/@cf/meta/llama-3-8b-instruct
Authorization: Bearer {{cfToken}}

{
    "messages": [
        {
            "role": "system",
            "content": "You are a friendly assistant that answers questions based on your knowledge. Your reply will be limited to 100 words. reply with simplified Chinese, unless the question asks for a specific language."
        },
        {
            "role": "user",
            "content": "中国上最长的河流是哪条？"
        }
    ]
}


### create chat agent
POST {{baseUrl}}/api/chats/1/agents
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "name": "agent X",
    "type": "proxy",
    "adapter": "ollama",
    "model": "llama3.2",
    "prompt": "You are a helpful assistant",
    "args": {}
}

### update chat agent
PATCH {{baseUrl}}/api/chats/1/agents
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "id": 3,
    "prompt": "You're the world's best translator. You understand English and Chinese well, also their culture and idioms. You will translate user input between English and Chinese. If the original text is English, you will translate it to elegant, authentic Simplified Chinese. If the original text is Chinese, you will translate it to elegant, authentic English. Only return the translated sentences, no other text or comments. below are the text to translate:",
    "args": {}
}

### list chat agents
GET {{baseUrl}}/api/chats/1/agents
Content-Type: application/json
Authorization: Bearer {{authToken}}


### send a chinese message
POST {{baseUrl}}/api/chats/1
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "content": "你好，今天工作辛苦了",
    "files": []
}

### send a english message
POST {{baseUrl}}/api/chats/1
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "content": "Well done! You made great progress today.",
    "files": []
}
